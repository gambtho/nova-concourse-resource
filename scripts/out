#!/bin/bash
# vim: set ft=sh

set -e -u

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

source=$1

if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp /tmp/resource-in.XXXXXX)

cat > $payload <&0

echo $payload

cd $source

insecure_registries=$(jq -r '.source.insecure_registries // [] | join(" ")' < $payload)

registry_mirror=$(jq -r '.source.registry_mirror // ""' < $payload)

username=$(jq -r '.source.username // ""' < $payload)
password=$(jq -r '.source.password // ""' < $payload)
repository=$(jq -r '.source.repository // ""' < $payload)
ca_certs=$(jq -r '.source.ca_certs // []' < $payload)
client_certs=$(jq -r '.source.client_certs // []' < $payload)





if private_registry "${repository}" ; then
  registry="$(extract_registry "${repository}")"
else
  registry=
fi

certs_to_file "$ca_certs"
set_client_certs "$client_certs"
start_docker "$insecure_registries" "$registry_mirror"
log_in "$username" "$password" "$registry"

export AWS_ACCESS_KEY_ID=$(jq -r '.source.aws_access_key_id // ""' < $payload)
export AWS_SECRET_ACCESS_KEY=$(jq -r '.source.aws_secret_access_key // ""' < $payload)
export AWS_DEFAULT_REGION=$(jq -r '.source.aws_default_region // ""' < $payload)
AWS_ACCESS_KEY_ID=$(jq -r '.source.aws_access_key_id // ""' < $payload)
AWS_SECRET_ACCESS_KEY=$(jq -r '.source.aws_secret_access_key // ""' < $payload)
AWS_DEFAULT_REGION=$(jq -r '.source.aws_default_region // ""' < $payload)

nova_stack=$(jq -r '.params.stack // "preproduction"' < $payload)
nova_env=$(jq -r '.params.env // "preproduction"' < $payload)
source_repo=$(jq -r '.params.source_repo // "echo-client-repo"' < $payload)
mkdir -p ~/.aws
cat > ~/.aws/credentials <<EOL
[$nova_env]
aws_access_key_id = $AWS_ACCESS_KEY_ID
aws_secret_access_key = $AWS_SECRET_ACCESS_KEY
EOL

tag_source=$(jq -r '.source.tag // "latest"' < $payload)
tag_params=$(jq -r '.params.tag // ""' < $payload)
tag_prefix=$(jq -r '.params.tag_prefix // ""' < $payload)
need_tag_as_latest=$(jq -r '.params.tag_as_latest // "false"' < $payload)
build_args=$(jq -r '.params.build_args // []' < $payload)
build_args_file=$(jq -r '.params.build_args_file // ""' < $payload)


tag_name=""
if [ -n "$tag_params" ]; then
  if [ ! -f "$tag_params" ]; then
    echo "tag file '$tag_params' does not exist"
    exit 1
  fi
  tag_name="${tag_prefix}$(cat $tag_params)"
else
  tag_name="$tag_source"
fi

if [ -z "$repository" ]; then
  echo "must specify repository"
  exit 1
fi

build=$(jq -r '.params.build // ""' < $payload)

dockerfile=$(jq -r ".params.dockerfile // \"${build}/Dockerfile\"" < $payload)

pull_repository=$(jq -r '.params.pull_repository // ""' < $payload)
pull_tag=$(jq -r '.params.pull_tag // "latest"' < $payload)
pull_tag_file=$(jq -r '.params.pull_tag_file // ""' < $payload)

if [ -n "$build" ]; then
  if [ ! -f "$dockerfile" ]; then
    echo "It doesn't appear that given Dockerfile: \"$dockerfile\" is a file"
    exit 1
  fi

  expanded_build_args=""
  if [ -n "$build_args" ]; then
    expanded_build_args=$(echo $build_args|jq -r 'with_entries(.key |= "--build-arg " + . )|with_entries(.key = .key + "=" +.value)|keys|join(" ")')
  fi

  if [ -n "$build_args_file" ]; then
    expanded_build_args=${expanded_build_args}" "$(jq -r 'with_entries(.key |= "--build-arg " + . )|with_entries(.key = .key + "=" +.value)|keys|join(" ")' <$build_args_file)
  fi

  ECR_REGISTRY_PATTERN='/[a-zA-Z0-9][a-zA-Z0-9_-]*\.dkr\.ecr\.[a-zA-Z0-9][a-zA-Z0-9_-]*\.amazonaws\.com(\.cn)?[^ ]*/'
  ecr_image=$(grep '^\s*FROM' ${dockerfile} | \
             awk "match(\$0,${ECR_REGISTRY_PATTERN}){print substr(\$0, RSTART, RLENGTH)}" )
  if [ -n "$ecr_image" ]; then
    # pull will perform an authentication process needed for ECR
    # there is an experimental endpoint to support long running sessions
    # docker cli does not support it yet though
    # see https://github.com/moby/moby/pull/32677
    # and https://github.com/awslabs/amazon-ecr-credential-helper/issues/9
    docker pull "${ecr_image}"
  fi

  docker build -t "${repository}:${tag_name}" $expanded_build_args -f "$dockerfile" "$build"
elif [ -n "$pull_repository" ]; then
  docker pull "${pull_repository}:${pull_tag}"
  docker tag "${pull_repository}:${pull_tag}" "${repository}:${tag_name}"
else
  echo "must specify build or pull_repository params"
  exit 1
fi

image_id="$(image_from_tag "$repository" "$tag_name")"

ls -l 
ls -l ../

echo "running nova deploy $nova_env $nova_stack in $source_repo with $image_id"
cd $source_repo

yes | nova deploy $nova_env $nova_stack
nova_status=$(echo $?) 

if [ "$nova_status" -ne "0" ]; then
  echo "nova failed"
  exit 1 
fi

jq -n "{
version: {
  time: $(date +%s | jq -R .)
},
metadata: [
  { name: \"nova_status\", value: $(echo $nova_status | jq -R .) }
]
}" >&3
